/*
 * Copyright (c) 2016 Duna Project
 * Ministério do Planejamento, Desenvolvimento de Gestão
 * República Federativa do Brasil
 *
 * This file is part of the Duna Project.
 */
plugins {
  id "nebula.kotlin" version "1.0.5-2"
  id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: 'kotlin'
apply plugin: 'application'

mainClassName = 'io.duna.core.ClusteredMain'

sourceSets {
  echo
  caller
}

configurations {
  duna
  quasar
  capsule
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
  compile project(':duna-core')
  compile project(':duna-rest-port')

  callerCompile sourceSets.main.runtimeClasspath
  callerCompile sourceSets.echo.output
  callerCompile "co.paralleluniverse:quasar-kotlin:0.7.7"

  echoCompile sourceSets.main.runtimeClasspath
  echoCompile project(':duna-agent')

  duna project(':duna-agent')
  quasar 'co.paralleluniverse:quasar-core:0.7.7:jdk8'

  capsule "co.paralleluniverse:capsule:0.3.1"

  testCompile "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
  testCompile "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
  testCompile "org.mockito:mockito-core:${versions.mockito}"
}

run {
  systemProperties["java.util.logging.manager"] = "org.apache.logging.log4j.jul.LogManager"
}

task echoJar(type: Jar) {
  from sourceSets.echo.output
}

task capsule(type: Jar, dependsOn: echoJar) {
  archiveName = project.name + "-capsule.jar"

  from echoJar // embed our application jar
  from { configurations.echoRuntime } // embed dependencies

  // we just need the single Capsule class
  from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' }

  manifest {
    attributes(
      'Main-Class'  : 'Capsule',
      'Application-Class' : mainClassName,
      'Min-Java-Version' : '1.8.0',
      'JVM-Args' : run.jvmArgs.join(' '), // copy JVM args from the run task
      'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '), // copy system properties
      'Java-Agents' : ++getDependencies(configurations.quasar).iterator() +
        ' ' + ++getDependencies(configurations.duna).iterator()
    )
  }
}

static def getDependencies(config) {
  return config.getAllDependencies().collect {
    def res = it.group + ':' + it.name + ':' + it.version +
      (!it.artifacts.isEmpty() ? ':' + it.artifacts.iterator().next().classifier : '')
    if(!it.excludeRules.isEmpty()) {
      res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
    }
    return res
  }
}
