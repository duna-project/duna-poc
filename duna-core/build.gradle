buildscript {
  repositories { jcenter() }
  dependencies {
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.9"
  }
}

plugins {
  id 'nebula.kotlin' version '1.0.4'
}

apply plugin: 'org.jetbrains.dokka'

configurations {
  quasar
  asm
}

ext {
  byteBuddyVersion = "1.5.0"
  asmVersion = "5.1"
}

dependencies {
  compile 'io.vertx:vertx-core:3.3.3'
  compile 'io.vertx:vertx-sync:3.3.3'

  compile 'co.paralleluniverse:quasar-core:0.7.6:jdk8'
  compile 'co.paralleluniverse:quasar-kotlin:0.7.6'

  compile 'com.google.inject:guice:4.1.0'
  compile 'com.google.inject.extensions:guice-multibindings:4.1.0'

  compile "net.bytebuddy:byte-buddy:${byteBuddyVersion}"

  compile 'org.apache.logging.log4j:log4j-api:2.6.2'
  compile 'org.apache.logging.log4j:log4j-core:2.6.2'

  compile 'org.msgpack:msgpack-core:0.8.10'
  compile 'org.msgpack:jackson-dataformat-msgpack:0.8.10'

  compile 'io.github.lukehutch:fast-classpath-scanner:2.0.3'

  compile files("${projectDir}/lib/asm-${asmVersion}.patched.jar")

  testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M2'
  testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M2'
  testCompile 'org.mockito:mockito-core:2.+'

  asm group: 'org.ow2.asm', name: 'asm', version: asmVersion
  asm group: 'org.ow2.asm', name: 'asm-analysis', version: asmVersion
  asm group: 'org.ow2.asm', name: 'asm-commons', version: asmVersion
  asm group: 'org.ow2.asm', name: 'asm-util', version: asmVersion
  asm group: 'com.googlecode.jarjar', name: 'jarjar', version: '1.3'


  quasar 'co.paralleluniverse:quasar-core:0.7.6:jdk8'
}

classes {
  doFirst {
    ant.taskdef(name: 'scanSuspendables',
        classname: 'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
        classpath: "build/classes/main:build/resources/main:${configurations.runtime.asPath}")
    ant.scanSuspendables(auto: false,
        suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables",
        supersFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
        append: true) {
      fileset(dir: sourceSets.main.output.classesDir)
    }
  }
}

tasks.withType(JavaExec) {
  jvmArgs "-javaagent:${configurations.quasar.iterator().next()}"
  jvmArgs '-XX:+UseParallelGC'
  jvmArgs '-XX:+UseCondCardMark'

  systemProperty "co.paralleluniverse.fibers.DefaultFiberPool.monitor", "JMX" // "METRICS" // "NONE" //
}

task runApp(type: JavaExec) {
  classpath = sourceSets.test.runtimeClasspath

  main = 'io.duna.vertx.Test'
}

project.ext.set("shouldBuildPatch", {
  !file("${project.projectDir}/lib/asm-${asmVersion}.patched.jar").exists()
})

/**
 * Copies the patch configuration's dependencies to a lib directory for processing.
 */
task downloadPatchLibs(type: Copy) {
  into("${projectDir}/lib")
  from(configurations.asm)
  exclude('jarjar*')
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

downloadPatchLibs.doFirst {
  if (!shouldBuildPatch()) { throw new StopExecutionException() }
}

/**
 * Takes the raw asm and byte-buddy dependencies, prefix the packages with
 * io.duna, and combines both the jars' modified classes into a single jar file.
 */
//noinspection GroovyAssignabilityCheck
task applyPatchToDependencies(dependsOn: 'downloadPatchLibs') << {
  if (shouldBuildPatch) {
    project.ant {
      taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.asm.asPath
      jarjar(jarfile: "${projectDir}/lib/asm-${asmVersion}.patched.jar", filesetmanifest: "merge") {
        zipgroupfileset(dir: "${projectDir}/lib", includes: '*.jar', excludes: '*.patched.jar')

        rule pattern: "org.objectweb.asm.**", result: "io.duna.asm.@1"
      }
    }
  }
}
compileKotlin.dependsOn(applyPatchToDependencies)

task cleanPatchedLibs(type: Delete) {
  delete "${projectDir}/lib"
}
clean.dependsOn(cleanPatchedLibs)