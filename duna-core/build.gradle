plugins {
  id 'nebula.kotlin' version '1.0.3'
}

configurations {
  patch
  [compile, testCompile]*.exclude module: 'byte-buddy-dep'
}

ext {
  byteBuddyVersion = "1.4.25"
}

dependencies {
  compile 'io.vertx:vertx-core:3.3.3'
  compile 'io.vertx:vertx-sync:3.3.3'

  compile 'com.google.inject:guice:4.1.0'
  compile 'com.google.inject.extensions:guice-multibindings:4.1.0'

  compile 'io.github.lukehutch:fast-classpath-scanner:2.0.3'

  compile files("${project.getBuildDir()}/lib/byte-buddy-1.4.24.patched.jar")

  patch "net.bytebuddy:byte-buddy-dep:${byteBuddyVersion}"
  patch 'com.googlecode.jarjar:jarjar:1.3'
}

project.ext.set("shouldBuildPatch", {
  !(new File("${project.buildDir}/lib/byte-buddy-${byteBuddyVersion}.patched.jar").exists())
})

/**
 * Copies the patch configuration's dependencies to a lib directory for processing.
 */
task downloadPatchLibs(type: Copy) {
  into("${project.getBuildDir()}/lib")
  from(configurations.patch)
  exclude('jarjar*')
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

downloadPatchLibs.doFirst {
  if (!shouldBuildPatch()) { throw new StopExecutionException() }
}

def buildDir = project.getBuildDir()
/**
 * Takes the raw asm and byte-buddy dependencies, prefix the packages with
 * io.duna, and combines both the jars' modified classes into a single jar file.
 */
//noinspection GroovyAssignabilityCheck
task applyPatchToDependencies(dependsOn: 'downloadPatchLibs') << {
  project.ant {
    taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.patch.asPath
    jarjar(jarfile: "${buildDir}/lib/byte-buddy-${byteBuddyVersion}.patched.jar", filesetmanifest: "merge") {
      zipfileset(src: "${buildDir}/lib/byte-buddy-dep-${byteBuddyVersion}.jar")
      zipfileset(src: "${buildDir}/lib/asm-*.jar")
      zipfileset(src: "${buildDir}/lib/asm-commons-*.jar")

      rule pattern: "net.bytebuddy.**", result: "io.duna.net.bytebuddy.@1"
      rule pattern: "org.objectweb.asm.**", result: "io.duna.org.objectweb.asm.@1"
    }
  }
}

task cleanPatchedLibs(type: Delete) {
  delete "${project.getBuildDir()}/lib"
}
clean.dependsOn(cleanPatchedLibs)